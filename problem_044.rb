### Problem:

# Pentagonal numbers are generated by the formula, Pn = n(3n − 1) / 2. The first
# ten pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70
# − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
# difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of
# D?

### Notes:

# Store the list of pentagonal numbers after generation.

# None found <= 2000, need to be able to resume from previous attempts.

### Solution:

module Pentagonal
  class CandidateFinder
    STARTING_INDEX = 1
    MAX_INDEX = 2000

    def self.run
      p 'Searching'

      pentagonals = {}
      largest_value = 0
      smallest_difference = nil
      index = STARTING_INDEX

      while index <= MAX_INDEX do
        print '.'
        pentagonal = pentagonals[index] || Pentagonal::Number.new(index)
        pentagonals[index] ||= pentagonal

        previous = pentagonals.select { |k, v| k < index }
        pairs = previous.map { |k, v| [v, pentagonal] }
        pairs.select do |pair|
          sum = pair.map(&:value).inject(&:+)
          if sum > largest_value
            secondary_index = index + 1
            until largest_value > sum
              lookahead = Pentagonal::Number.new(secondary_index)
              pentagonals[secondary_index] = lookahead
              largest_value = [lookahead.value, largest_value].max
              secondary_index += 1
            end
          end
          difference = pair.map(&:value).inject(&:-).abs
          values = pentagonals.values.map(&:value)
          if values.include?(sum) && values.include?(difference)
            # check to see if difference is smallest
            if smallest_difference.nil? || difference < smallest_difference
              p
              p "Found candidate pair with difference #{difference}, indices #{pair.map(&:index)}"
              p 'Continue? (y/N)'
              return unless gets.match(/y/i)
              p 'Continuing search'
            end
          end
        end

        index += 1
      end
    end
  end

  class Number
    include Comparable

    attr_accessor :index, :value

    def initialize(index)
      @index = index
      @value = index * (3 * index - 1) / 2
    end

    def <=>(other)
      index <=> other.index
    end

    def to_s
      "Pentagonal::Number, Index: #{index}, Value: #{value}"
    end
  end
end

Pentagonal::CandidateFinder.run
